@begin Yener_Tensor
@out Gates_Tensor
cleaning and closing
% @begin Load_Dataset
% @desc Load ANTHA dataset
% @in ANTHA_spreadsheet @uri file:ANTHAyener.xlsx
% @out num @as num_0
% @end Load_Dataset
% @begin Adjust_APGAR
% @desc Adjust APGAR Scores: Ensure they are between 0-10
% @in num @as num_0
% @out num @as num_1
% @end Adjust_APGAR
% @begin Choose_Subjects
% @desc Choose only subjects with all five time points
% @in num @as num_1
% @out subj
% @out ib @as ib_0
% @out final @as final_0
get unique subjids
count the number of occurrences
take only subjects with all five time points
only subjects with all five time points
% @end Choose_Subjects
% @begin Start_Missing_Values
% @desc Impute or remove missing values based on how many are missing
% @in subj
% @in final @as final_0
% @in ib @as ib_0
% @out ib @as ib_1
interate through the total number of subjects
what subject number?
dealing with one subject
% @end Start:_Missing_Values
% @begin Count_Missing
% @desc Count missing heights, BMIs and weights
% @in final @as final_0
% @in ib @as ib_1
% @out heights
% @out bmis
% @out weights
% @out times
% @out where
heights for that subject
bmis for that subject
weights for that subject
times for that subject
which values are missing?
how many are missing?
% @end Count_Missing
% @begin Impute_One_Missing
% @desc Use regression model to impute for one missing time point
% @in heights
% @in bmis
% @in weights
% @in times
% @in where
% @in final @as final_0
% @in ib @as ib_1
% @out final @as final_1
only 1 missing time point
linear fit
quad fit
linear r^2?
quad r^2?
if linear better than quad
if quad better than linear
% @end Impute_One_Missing
% @begin Impute_Two_Missing
% @desc Use linear fit to impute for two missing_time_points
% @in heights
% @in bmis
% @in weights
% @in times
% @in where
% @in final @as final_0
% @in ib @as ib_1
% @out final @as final_2
2 missing time points - linear fit
where are the missing values
% @end Impute_Two_Missing
% @begin Remove_More_Than_Two_Missing
% @desc Remove subjects with more than two missing time points
% @in final @as final_0
% @in ib @as ib_1
% @out final @as final_3
get rid of subjects >2 missing time points
% @end Remove_More_Than_Two_Missing
% @begin Write_final
% @in final @as final_1
% @in final @as final_2
% @in final @as final_3
% @out test_spreadsheet_final @uri file:ANTHAyenerfinalmine.xlsx
% @end Write_final
% @begin Loading_data_for_tensor
% @in test_spreadsheet_final @uri file:ANTHAyenerfinalmine.xlsx
% @out num @as num_2
% @end Loading_data_for_tensor
% @begin Getting_characteristics
% @in num @as num_2
% @out chara
% @end Getting_characteristics
% @begin Fixing_feeding_n
% @in chara
% @out chara @as chara_1
% @end Fixing_feeding_n
% @begin Fill_in_average_values
% @in chara @as chara_1
% @out chara @as chara_2
where all the missing values are
% @end Fill_in_average_values
% @begin Going_through_all_the_columns
% @in chara @as chara_2
% @out chara @as chara_3
% @end Going_through_all_the_columns
% @begin Does_column_have_missing_values
% @in chara @as chara_3
% @out chara @as chara_4
% @out C
% @end Does_column_have_missing_values
% @begin Determine_missing_values
% @in chara @as chara_4
% @in C
% @out gender
% @out weights_1
% @out heights_1
gender of missing value
- num(num(:,2)==C(c) & num(:,3)==1,4))); % weight comparison
heights = transpose(abs(num(num(~ismember(num(:,2),C),3)==1,5)
height comparison
chara(~ismember(chara(:,1),C),k)']; % comparison; gender; value
[sorted,idx] = sort(together(1,:)); % sort by comparison value
together = together(:,idx); % organize them by comparison value
idx = find(together(2,:) == gender,10,'first'); % find the first 10 values
if ismember(k,[2 3 8 13])
chara(chara(:,1) == C(c),k) = mode(together(3,idx)); % take their mode
else
chara(chara(:,1) == C(c),k) = nanmean(together(3,idx)); % take their mean
end
end
%% @end Determine_missing_values
end
end
% by the end i have a perfect mean matrix
%% @begin Creating_Gates_Tensor
%% @in num @as num_2
%% @in chara @as chara_4
%% @out gates_tensor
gates_tensor = NaN(21382,23,5);
t = 1; % time counter
for k = [1 123 366 1462 2558]
logical = (num(:,3) == k);
gates_tensor(:,:,t) = [chara(:,1) num(logical,4:10) chara(:,2:end)];
t = t + 1; % increment time counter
end
%% @end Creating_Gates_Tensor
%% @end Yener_Tensor
